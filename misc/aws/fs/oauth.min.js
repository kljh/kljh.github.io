'use strict';

const aws = require('aws-sdk');
const s3 = new aws.S3({ signatureVersion: 'v4' });

var users, auth_to_user_id;
async function build_user_infos() {
    if (users)
        return;

    users = await read_text_from_s3("kusers", "users.json");

    auth_to_user_id = {};
    for (var user_id in users ) {
        for (var auth_id of users[user_id].auth_ids) {
            if (!auth_id.startsWith('@'))
                auth_to_user_id[auth_id] = user_id;
        }
    }
}

async function user_name(headers, prms) {
    var cookie = headers["Cookie"] || headers["cookie"] || "";
    var cookies = Object.fromEntries(cookie.split(";").map(x => x.split("=", 2).map(y => y.trim())));
    var { uid, hash } = cookies;

    if (!uid && !hash) {
        try {
            uid = prms.uid;
            hash = prms.hash;
        } catch(e) {}
    }

    await build_user_infos();

    var ok = hash == user_hash(uid);
    if (ok) return auth_to_user_id[uid];
}

function user_hash(uid) {
    var crypto = require('crypto');
    var hash = crypto.createHash('md5')
        .update(uid + process.env.USER_HASH + new Date().toISOString().substr(0,8), 'utf8')     // utf-8, binary, or ascii
        .digest('base64').replace(/=/g, "");
    return hash;
}

async function check_permission(user, other_user) {
    // check permission
    await build_user_infos();
    if (user == other_user)
        return true;
    if (!users[other_user] || users[other_user].auth_ids.indexOf("@"+user) == -1)
        throw new Error("User "+user+" : no permissioned found to access "+other_user);
    return true;
}

async function path_to_key(user, path) {
    if (path.startsWith("~/")) {
        return user + "/" + path.substr(2);
    }
    if (path.startsWith("~")) {
        var p = path.indexOf("/");
        if (p==-1) p = path.length;
        var other_user = path.substring(1, p);

        await check_permission(user, other_user);
        return other_user + "/" + path.substring(p+1);
    }
    return user + "/" + path;
}

function read_text_from_s3(bucket, key) {
    return s3.getObject({ Bucket: bucket, Key: key }).promise()
        .then(data => data.Body.toString())
		.then(data => JSON.parse(data));
}

module.exports = { user_name, path_to_key };
