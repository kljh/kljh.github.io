
// escape() method :
// - does not encode the + character which is interpreted as a space on the server side and is generated by forms with spaces in their fields. 
// - fails to handle non-ASCII characters correctly => should avoid use of escape() whenever possible. best alternative is usually encodeURIComponent().
// - will not encode: @*/+
// 
// encodeURI() method 
// - a bit more specialized than escape() in that it encodes for URIs as opposed to the querystring, which is part of a URL. 
// - use this method when you need to encode a string to be used for any resource that uses URIs and needs certain characters to remain un-encoded. 
// - will not encode: ~!@#$&*()=:/,;?+'
// 
// encodeURIComponent() method 
// - should be used in most cases when encoding a single component of a URI. 
// - will encode certain chars that would normally be recognized as special chars for URIs so that many components may be included. 
//-  will not encode: ~!*()'

function parse_query(q)
{
	// parse the query
	var x = q.substring(1).replace(/\+/g, ' ').replace(/;/g, '&').split('&');
	
	// q changes from string version of query to object
	var q={};
	for (var i=0; i<x.length; i++)
	{
		var t = x[i].split('=', 2);
		var name = unescape(t[0]);
		if (!q[name])
			q[name] = [];
		if (t.length>1)
			q[name][q[name].length] = unescape(t[1]);
		// next two lines are nonstandard 
		else
			q[name][q[name].length] = true;
	}
	return q;
}

function params() {
	return parse_query(location.search);
}


// --------------------------------------------------------------------------------------------------------------------

// httpRequest can only be done to the domain hosting the page (eg can't be done in a local page)

function xmlhttp_manual() 
{
	try {
		xmlhttp=new XMLHttpRequest()
		if (window.XMLHttpRequest) {
			xmlhttp = new XMLHttpRequest(); // code for IE7+, Firefox, Chrome, Opera, Safari
		} else {
			xmlhttp = new ActiveXObject("Microsoft.XMLHTTP"); // IE6, IE5
		}
		
		xmlhttp.open("GET","http://dl.dropbox.com/u/11932549/a.html",false);
		xmlhttp.send();
		xmlDoc=xmlhttp.responseText;
		info_msg("response" + xmlDoc);
	} catch(e) {
		error_msg("xmlhttp_manual. "+e.message);
	}
}

function xmlhttp_jsquery() 
{
	try {
		$.ajax({
			type: "GET",
			url: "http://dl.dropbox.com/u/11932549/a.html",
			dataType: "text",
			success: function(response) {
				alert("Data Loaded.");
			},
			error: function(xhr, ajaxOptions, thrownError) {
				alert("Data failed.");
				alert(xhr.status);
				alert(thrownError);
			}
		});
	} catch(e) {
		error_msg("xmlhttp_jsquery. "+e.message);
	}
}

// --------------------------------------------------------------------------------------------------------------------

function info_msg(txt) {
	try {
		//document.getElementById('log').innerText += txt + "</br>";
		document.getElementById('log').innerHTML += txt + '</br>';
	} catch(e) {}
}

function warn_msg(txt) {
	try {
		document.getElementById('log').innerHTML += '<b>' +txt + '</b></br>';
	} catch(e) {
		alert(txt);
	}
}

function error_msg(txt) {
	try {
		document.getElementById('log').innerHTML += '<b style="color:red;">' +txt + '</b></br>';
	} catch(e) {
		alert(txt);
	}
}

function clear_msg(txt) {
	document.getElementById('log').innerHTML = '<a href="#" onclick="clear_msg();">clear msg (press \'x\')</a></br>'
}

// -----------------------------------------------------------------------------------------------------

function obj_txt(o)
{
	t = ""
	for (i in o)
		t += i+" : "+o[i]+"\n"
	return t
}
